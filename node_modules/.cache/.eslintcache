[{"/home/mariana/Documents/reactjs/Letmeask/src/index.tsx":"1","/home/mariana/Documents/reactjs/Letmeask/src/App.tsx":"2","/home/mariana/Documents/reactjs/Letmeask/src/pages/Home.tsx":"3","/home/mariana/Documents/reactjs/Letmeask/src/services/firebase.tsx":"4","/home/mariana/Documents/reactjs/Letmeask/src/components/Button.tsx":"5","/home/mariana/Documents/reactjs/Letmeask/src/pages/NewRoom.tsx":"6","/home/mariana/Documents/reactjs/Letmeask/src/contexts/AuthContext.tsx":"7","/home/mariana/Documents/reactjs/Letmeask/src/hooks/useAuth.ts":"8","/home/mariana/Documents/reactjs/Letmeask/src/pages/Room.tsx":"9","/home/mariana/Documents/reactjs/Letmeask/src/components/RoomCode.tsx":"10","/home/mariana/Documents/reactjs/Letmeask/src/components/Questions.tsx":"11","/home/mariana/Documents/reactjs/Letmeask/src/hooks/useRoom.ts":"12","/home/mariana/Documents/reactjs/Letmeask/src/pages/AdminRoom.tsx":"13"},{"size":260,"mtime":1650066156741,"results":"14","hashOfConfig":"15"},{"size":735,"mtime":1650216590204,"results":"16","hashOfConfig":"15"},{"size":2451,"mtime":1650225774707,"results":"17","hashOfConfig":"15"},{"size":716,"mtime":1649272459123,"results":"18","hashOfConfig":"15"},{"size":350,"mtime":1650217546196,"results":"19","hashOfConfig":"15"},{"size":1972,"mtime":1650114522004,"results":"20","hashOfConfig":"15"},{"size":1716,"mtime":1650111838493,"results":"21","hashOfConfig":"15"},{"size":186,"mtime":1649284866177,"results":"22","hashOfConfig":"15"},{"size":4612,"mtime":1650233533063,"results":"23","hashOfConfig":"15"},{"size":524,"mtime":1650198281281,"results":"24","hashOfConfig":"15"},{"size":877,"mtime":1650233172761,"results":"25","hashOfConfig":"15"},{"size":1778,"mtime":1650224392829,"results":"26","hashOfConfig":"15"},{"size":3455,"mtime":1650233503847,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"2inqt0",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"73"},"/home/mariana/Documents/reactjs/Letmeask/src/index.tsx",[],[],["74","75"],"/home/mariana/Documents/reactjs/Letmeask/src/App.tsx",[],[],["76","77"],"/home/mariana/Documents/reactjs/Letmeask/src/pages/Home.tsx",["78","79"],[],"import { useHistory} from 'react-router-dom'\n\nimport { auth, database, firebase} from '../services/firebase'\n\nimport illustrationImg from '../assets/images/illustration.svg';\nimport logoImg from '../assets/images/logo.svg';\nimport googleImg from '../assets/images/google-icon.svg';\n\nimport '../styles/auth.scss';\nimport { Button } from '../components/Button';\nimport { useAuth } from '../hooks/useAuth';\nimport { FormEvent, useState } from 'react';\n\nexport function Home() {\n    const history = useHistory();\n    const {user, singInWithGoogle} = useAuth();  \n    const [roomCode, setRoomCode] = useState(''); \n\n    async function handleCreateRoom() {\n        if(!user) {\n            await singInWithGoogle()\n        }\n\n     history.push('/rooms/news');\n    }\n\n    async function handleJoinRoom(event: FormEvent ) {\n        event.preventDefault();\n\n        if(roomCode.trim() ==='') {\n            return;\n        }\n\n        const roomRef = await database.ref(`rooms/${roomCode}`).get();\n\n        if(!roomRef.exists()) {\n            alert('Room does not exists');\n            return;\n        }\n\n        if(roomRef.val().endedAt) {\n            alert('Room already closes.');\n            return;\n        }\n\n        history.push(`rooms/${roomCode}`);\n    }\n\n    return (\n        <div id='page-auth'>\n            <aside>\n                <img src={illustrationImg} alt =\"ilustração de pergunta e respostas\"/>\n                <strong>Crie salas de Q&amp;A ao-vivo</strong>\n                <p>Tire as dúvidas da sua audiência em tempo real</p>\n            </aside>\n            <main>\n                <div className='main-content'>\n                    <img src={logoImg} alt=\"imagem do logo\"/>\n                    <button onClick={handleCreateRoom} className='create-room'>\n                    <img src={googleImg} alt=\"logo do google\"/>\n                        Crie sua sala com o Google\n                    </button>\n                    <div className='separator'>ou entre em uma sala</div>\n                    <form onSubmit={handleJoinRoom}>\n                        <input type=\"text\"\n                        placeholder=\"digite o código da sala\"\n                        onChange={event => setRoomCode(event.target.value)}\n                        value={roomCode}\n                       />\n                       <Button type='submit'>Entrar na sala</Button>\n                    </form>\n                </div>\n            </main>\n        </div>\n    )\n}","/home/mariana/Documents/reactjs/Letmeask/src/services/firebase.tsx",[],[],"/home/mariana/Documents/reactjs/Letmeask/src/components/Button.tsx",[],[],"/home/mariana/Documents/reactjs/Letmeask/src/pages/NewRoom.tsx",[],[],"/home/mariana/Documents/reactjs/Letmeask/src/contexts/AuthContext.tsx",[],[],"/home/mariana/Documents/reactjs/Letmeask/src/hooks/useAuth.ts",[],[],"/home/mariana/Documents/reactjs/Letmeask/src/pages/Room.tsx",["80"],[],"import { FormEvent, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport logoImg from '../assets/images/logo.svg';\nimport { Button } from '../components/Button';\nimport { Question } from '../components/Questions';\nimport { RoomCode } from '../components/RoomCode';\nimport { useAuth } from '../hooks/useAuth';\nimport { useRoom } from '../hooks/useRoom';\nimport { database } from '../services/firebase';\n\nimport '../styles/room.scss';\n\ntype RoomParams = {\n  id: string;\n}\nexport function Room() {\n    const { user } = useAuth();\n    const params = useParams<RoomParams>();\n    const [newQuestion, setNewQuestion] = useState('');\n    const roomId = params.id;\n    const {questions, title} = useRoom(roomId);\n  \n    async function handleSendQuestion(event: FormEvent) {\n      event.preventDefault();\n  \n      if (newQuestion.trim() === '') {\n        return;\n      }\n  \n      if (!user) {\n        throw new Error('You must be logged in');\n      }\n  \n      const question = {\n        content: newQuestion,\n        author: {\n          name: user.name,\n          avatar: user.avatar,\n        },\n        isHighlighted: false,\n        isAnswered: false\n      };\n  \n      await database.ref(`rooms/${roomId}/questions`).push(question);\n  \n      setNewQuestion('');\n    }\n\n    async function handleLikeQuestion(questionId: string, likeId: string | undefined) {\n      if(likeId) {\n        await database.ref(`rooms/${roomId}/questions/${questionId}/likes/${likeId}`).remove()\n      }\n      else {\n        await database.ref(`rooms/${roomId}/questions/${questionId}/likes`).push({\n          authorId: user?.id,\n      })\n      }\n    }\n  \n    return (\n      <div id=\"page-room\">\n        <header>\n          <div className=\"content\">\n            <img src={logoImg} alt=\"Letmeask\" />\n            <RoomCode code={roomId} />\n          </div>\n        </header>\n  \n        <main>\n          <div className=\"room-title\">\n            <h1>Sala {title}</h1>\n            { questions.length > 0 && <span>{questions.length} pergunta(s)</span> }\n          </div>\n  \n          <form onSubmit={handleSendQuestion}>\n            <textarea\n              placeholder=\"O que você quer perguntar?\"\n              onChange={event => setNewQuestion(event.target.value)}\n              value={newQuestion}\n            />\n  \n            <div className=\"form-footer\">\n              { user ? (\n                <div className=\"user-info\">\n                  {/* <img src={user.avatar} alt={user.name} /> */}\n                  <span>{user.name}</span>\n                </div>\n              ) : (\n                <span>Para enviar uma pergunta, <button>faça seu login</button>.</span>\n              ) }\n              <Button type=\"submit\" disabled={!user}>Enviar pergunta</Button>\n            </div>\n          </form>\n          <div className=\"question-list\">\n            {\n              questions.map(questions => {\n                return (\n                  <Question\n                    key={questions.id}\n                    content={questions.content}\n                    author={questions.author}\n                    isAnswered={questions.isAnswered}\n                    isHighlighted={questions.isHighlighted}\n                  >\n                    <button className={`like-button ${questions.likeId ? 'liked' : ''}`}\n                    type='button'\n                    aria-label='marcar como gostei'\n                    onClick={() => handleLikeQuestion(questions.id, questions.likeId)}\n                    >\n                      {\n                        questions.likeCount > 0 && <span>{questions.likeCount}</span>\n                      }\n                      <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <path d=\"M7 22H4C3.46957 22 2.96086 21.7893 2.58579 21.4142C2.21071 21.0391 2 20.5304 2 20V13C2 12.4696 2.21071 11.9609 2.58579 11.5858C2.96086 11.2107 3.46957 11 4 11H7M14 9V5C14 4.20435 13.6839 3.44129 13.1213 2.87868C12.5587 2.31607 11.7956 2 11 2L7 11V22H18.28C18.7623 22.0055 19.2304 21.8364 19.5979 21.524C19.9654 21.2116 20.2077 20.7769 20.28 20.3L21.66 11.3C21.7035 11.0134 21.6842 10.7207 21.6033 10.4423C21.5225 10.1638 21.3821 9.90629 21.1919 9.68751C21.0016 9.46873 20.7661 9.29393 20.5016 9.17522C20.2371 9.0565 19.9499 8.99672 19.66 9H14Z\" stroke=\"#737380\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                      </svg>\n                    </button>\n\n                  </Question>\n                )\n              })\n            }\n          </div>\n        </main>\n      </div>\n    );\n  }","/home/mariana/Documents/reactjs/Letmeask/src/components/RoomCode.tsx",[],[],["81","82"],"/home/mariana/Documents/reactjs/Letmeask/src/components/Questions.tsx",[],[],"/home/mariana/Documents/reactjs/Letmeask/src/hooks/useRoom.ts",[],[],"/home/mariana/Documents/reactjs/Letmeask/src/pages/AdminRoom.tsx",["83","84","85","86","87"],[],"import { FormEvent, useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\n\nimport logoImg from '../assets/images/logo.svg';\nimport deletImg from '../assets/images/delete.svg';\nimport checkImg from '../assets/images/check.svg';\nimport answerImg from '../assets/images/answer.svg';\n\nimport { Button } from '../components/Button';\nimport { Question } from '../components/Questions';\nimport { RoomCode } from '../components/RoomCode';\nimport { useAuth } from '../hooks/useAuth';\nimport { useRoom } from '../hooks/useRoom';\nimport { database } from '../services/firebase';\n\nimport '../styles/room.scss';\n\ntype RoomParams = {\n  id: string;\n}\nexport function AdminRoom() {\n  const history = useHistory()\n    const { user } = useAuth();\n    const params = useParams<RoomParams>();\n    const [newQuestion, setNewQuestion] = useState('');\n    const roomId = params.id;\n    const {questions, title} = useRoom(roomId);\n\n    async function handleEndRoom() {\n      await database.ref(`rooms/${roomId}`).update({\n        endedAt: new Date(),\n      })\n\n      history.push('/');\n    }\n  \n    async function handleDeleteQuestion() {\n      if(window.confirm('Tem certeza que deseja excluir essa pergunta?')) {\n        await database.ref(`rooms/${roomId}/questions/${questions}`).remove();\n      }\n    }\n\n    async function handleCheckQuestionAsAnswered() {\n      await database.ref(`rooms/${roomId}/questions/${questions}`).update({\n        isAnswered: true,\n      })\n    }\n\n    async function handleHighlightQuestion() {\n      await database.ref(`rooms/${roomId}/questions/${questions}`).update({\n        isHighlighted: true,\n      })\n    }\n  \n    return (\n      <div id=\"page-room\">\n        <header>\n          <div className=\"content\">\n            <img src={logoImg} alt=\"Letmeask\" />\n            <div>\n            <RoomCode code={roomId} />\n            <Button isOutline onClick={handleEndRoom}>Encerrar sala</Button>\n            </div>\n          </div>\n        </header>\n  \n        <main>\n          <div className=\"room-title\">\n            <h1>Sala {title}</h1>\n            { questions.length > 0 && <span>{questions.length} pergunta(s)</span> }\n          </div>\n\n          <div className=\"question-list\">\n            {\n              questions.map(questions => {\n                return (\n                  <Question\n                    key={questions.id}\n                    content={questions.content}\n                    author={questions.author}\n                    isAnswered={questions.isAnswered}\n                    isHighlighted={questions.isHighlighted}\n                    >\n                    <button type='button'\n                      onClick={() => handleCheckQuestionAsAnswered()}\n                    >\n                        <img src={checkImg} alt='marcar pergunta como respondida' />\n                    </button>\n                    <button type='button'\n                      onClick={() => handleHighlightQuestion()}\n                    >\n                        <img src={answerImg} alt='da destque à pergunta' />\n                    </button>\n                    <button type='button'\n                      onClick={() => handleDeleteQuestion()}\n                    >\n                        <img src={deletImg} alt='deletar pergunta' />\n                    </button>\n                  </Question>\n\n                )\n              })\n            }\n          </div>\n        </main>\n      </div>\n    );\n  }",["88","89"],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"90","replacedBy":"94"},{"ruleId":"92","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":3,"column":10,"nodeType":"98","messageId":"99","endLine":3,"endColumn":14},{"ruleId":"96","severity":1,"message":"100","line":3,"column":26,"nodeType":"98","messageId":"99","endLine":3,"endColumn":34},{"ruleId":"96","severity":1,"message":"101","line":1,"column":21,"nodeType":"98","messageId":"99","endLine":1,"endColumn":30},{"ruleId":"90","replacedBy":"102"},{"ruleId":"92","replacedBy":"103"},{"ruleId":"96","severity":1,"message":"104","line":1,"column":10,"nodeType":"98","messageId":"99","endLine":1,"endColumn":19},{"ruleId":"96","severity":1,"message":"101","line":1,"column":21,"nodeType":"98","messageId":"99","endLine":1,"endColumn":30},{"ruleId":"96","severity":1,"message":"105","line":23,"column":13,"nodeType":"98","messageId":"99","endLine":23,"endColumn":17},{"ruleId":"96","severity":1,"message":"106","line":25,"column":12,"nodeType":"98","messageId":"99","endLine":25,"endColumn":23},{"ruleId":"96","severity":1,"message":"107","line":25,"column":25,"nodeType":"98","messageId":"99","endLine":25,"endColumn":39},{"ruleId":"90","replacedBy":"108"},{"ruleId":"92","replacedBy":"109"},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],["110"],["111"],"@typescript-eslint/no-unused-vars","'auth' is defined but never used.","Identifier","unusedVar","'firebase' is defined but never used.","'useEffect' is defined but never used.",["110"],["111"],"'FormEvent' is defined but never used.","'user' is assigned a value but never used.","'newQuestion' is assigned a value but never used.","'setNewQuestion' is assigned a value but never used.",["110"],["111"],"no-global-assign","no-unsafe-negation"]