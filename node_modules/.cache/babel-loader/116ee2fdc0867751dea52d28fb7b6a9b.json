{"ast":null,"code":"var _jsxFileName = \"/home/mariana/Documents/reactjs/Letmeask/src/pages/Room.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport logoImg from '../assets/images/logo.svg';\nimport { Button } from '../components/Button';\nimport { RoomCode } from '../components/RoomCode';\nimport { useAuth } from '../hooks/useAuth';\nimport { database } from '../services/firebase';\nimport '../styles/room.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Room() {\n  _s();\n\n  const {\n    user\n  } = useAuth();\n  const params = useParams();\n  const [newQuestion, setNewQuestion] = useState('');\n  const roomId = params.id;\n  useEffect(() => {\n    const roomRef = database.ref(`rooms/${roomId}`);\n    roomRef.once('value', room => {\n      var _databaseRoom$questio;\n\n      const databaseRoom = room.val();\n      const firebaseQuestions = (_databaseRoom$questio = databaseRoom.questions) !== null && _databaseRoom$questio !== void 0 ? _databaseRoom$questio : {};\n      const parsedQuestions = Object.entries(firebaseQuestions);\n    });\n  }, [roomId]);\n\n  async function handleSendQuestion(event) {\n    event.preventDefault();\n\n    if (newQuestion.trim() === '') {\n      return;\n    }\n\n    if (!user) {\n      throw new Error('You must be logged in');\n    }\n\n    const question = {\n      content: newQuestion,\n      author: {\n        name: user.name,\n        avatar: user.avatar\n      },\n      isHightlihted: false,\n      isAnswered: false\n    };\n    await database.ref(`rooms/${roomId}/questions`).push(question);\n    setNewQuestion('');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"page-room\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logoImg,\n          alt: \"logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(RoomCode, {\n          code: params.id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Sala React\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"4 perguntas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSendQuestion,\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"O que voc\\xEA quer perguntar?\",\n          onChange: event => setNewQuestion(event.target.value),\n          value: newQuestion\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-footer\",\n          children: [user ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-info\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: user.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Para enviar uma pergunta \", /*#__PURE__*/_jsxDEV(\"button\", {\n              children: \"fa\\xE7a seu login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 64\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            disabled: !user,\n            children: \"Enivar pergunta\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 26\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Room, \"Om8cSls+u4l+f9QPjBaNH4cBC7U=\", false, function () {\n  return [useAuth, useParams];\n});\n\n_c = Room;\n\nvar _c;\n\n$RefreshReg$(_c, \"Room\");","map":{"version":3,"sources":["/home/mariana/Documents/reactjs/Letmeask/src/pages/Room.tsx"],"names":["useEffect","useState","useParams","logoImg","Button","RoomCode","useAuth","database","Room","user","params","newQuestion","setNewQuestion","roomId","id","roomRef","ref","once","room","databaseRoom","val","firebaseQuestions","questions","parsedQuestions","Object","entries","handleSendQuestion","event","preventDefault","trim","Error","question","content","author","name","avatar","isHightlihted","isAnswered","push","target","value"],"mappings":"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","sourcesContent":["import { FormEvent, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport logoImg from '../assets/images/logo.svg';\nimport { Button } from '../components/Button';\nimport { RoomCode } from '../components/RoomCode';\nimport { useAuth } from '../hooks/useAuth';\nimport { database } from '../services/firebase';\n\nimport '../styles/room.scss';\n\ntype FirebaseQuestions = Record<string,{\n    author: {\n        name: string;\n        avatar: string;\n    },\n    content: string;\n    isAnswerd: boolean;\n    isHighlighted: boolean;\n}>\n\ntype RoomParams = {\n    id: string;\n}\n\nexport function Room() {\n    const {user} = useAuth();\n    const params = useParams<RoomParams>();\n    const [newQuestion, setNewQuestion] = useState('');\n\n    const roomId = params.id;\n\n    useEffect(() => {\n        const roomRef = database.ref(`rooms/${roomId}`);\n\n        roomRef.once('value', room => {\n            const databaseRoom = room.val();\n            const firebaseQuestions: FirebaseQuestions = databaseRoom.questions ?? {};\n\n            const parsedQuestions = Object.entries(firebaseQuestions)\n        })\n    }, [roomId]);\n\n    async function handleSendQuestion(event: FormEvent) {\n\n        event.preventDefault();\n\n        if(newQuestion.trim() === '') {\n            return;\n        }\n\n        if(!user) {\n            throw new Error('You must be logged in');\n        }\n\n        const question = {\n            content: newQuestion,\n            author: {\n                name: user.name,\n                avatar: user.avatar,\n            },\n            isHightlihted: false,\n            isAnswered: false\n        };\n\n        await database.ref(`rooms/${roomId}/questions`).push(question);\n\n        setNewQuestion('');\n    }\n\n    return(\n        <div id=\"page-room\">\n            <header>\n                <div className=\"content\">\n                    <img src={logoImg} alt=\"logo\" />\n                        <RoomCode code={params.id}/>\n                </div>\n            </header>\n\n            <main className=\"content\">\n                <div className=\"room-title\">\n                    <h1>Sala React</h1>\n                    <span>4 perguntas</span>\n                 </div>\n\n                 <form onSubmit={handleSendQuestion}>\n                     <textarea  placeholder='O que você quer perguntar?' \n                        onChange={event => setNewQuestion(event.target.value)}\n                        value={newQuestion}\n                     />\n\n                     <div className=\"form-footer\">\n                            { user ? (\n                                <div className='user-info'>\n                                    {/* <img src={user.avatar} alt={user.name} /> */}\n                                    <span>{user.name}</span>\n                                </div>\n                            ) : (\n                                <span>Para enviar uma pergunta <button>faça seu login</button></span>\n                            ) }\n                         <Button type='submit' disabled={!user}>Enivar pergunta</Button>\n                     </div>\n                 </form>\n            </main>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}