{"ast":null,"code":"var _jsxFileName = \"/home/mariana/Documents/reactjs/Letmeask/src/pages/AdminRoom.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport logoImg from '../assets/images/logo.svg';\nimport { Button } from '../components/Button';\nimport { Question } from '../components/Questions';\nimport { RoomCode } from '../components/RoomCode';\nimport { useAuth } from '../hooks/useAuth';\nimport { useRoom } from '../hooks/useRoom';\nimport { database } from '../services/firebase';\nimport '../styles/room.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function AdminRoom() {\n  _s();\n\n  const {\n    user\n  } = useAuth();\n  const params = useParams();\n  const [newQuestion, setNewQuestion] = useState('');\n  const roomId = params.id;\n  const {\n    questions,\n    title\n  } = useRoom(roomId);\n\n  async function handleSendQuestion(event) {\n    event.preventDefault();\n\n    if (newQuestion.trim() === '') {\n      return;\n    }\n\n    if (!user) {\n      throw new Error('You must be logged in');\n    }\n\n    const question = {\n      content: newQuestion,\n      author: {\n        name: user.name,\n        avatar: user.avatar\n      },\n      isHighlighted: false,\n      isAnswered: false\n    };\n    await database.ref(`rooms/${roomId}/questions`).push(question);\n    setNewQuestion('');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"page-room\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logoImg,\n          alt: \"Letmeask\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(RoomCode, {\n            code: roomId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            isOutline: true,\n            children: \"Encerrar sala\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Sala \", title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), questions.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [questions.length, \" pergunta(s)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 39\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-list\",\n        children: questions.map(questions => {\n          return /*#__PURE__*/_jsxDEV(Question, {\n            content: questions.content,\n            author: questions.author\n          }, questions.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 19\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 7\n  }, this);\n}\n\n_s(AdminRoom, \"zFbrhW+w7c/XhrkZcMwtmAYTl6A=\", false, function () {\n  return [useAuth, useParams, useRoom];\n});\n\n_c = AdminRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"AdminRoom\");","map":{"version":3,"sources":["/home/mariana/Documents/reactjs/Letmeask/src/pages/AdminRoom.tsx"],"names":["useState","useParams","logoImg","Button","Question","RoomCode","useAuth","useRoom","database","AdminRoom","user","params","newQuestion","setNewQuestion","roomId","id","questions","title","handleSendQuestion","event","preventDefault","trim","Error","question","content","author","name","avatar","isHighlighted","isAnswered","ref","push","length","map"],"mappings":"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","sourcesContent":["import { FormEvent, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport logoImg from '../assets/images/logo.svg';\nimport { Button } from '../components/Button';\nimport { Question } from '../components/Questions';\nimport { RoomCode } from '../components/RoomCode';\nimport { useAuth } from '../hooks/useAuth';\nimport { useRoom } from '../hooks/useRoom';\nimport { database } from '../services/firebase';\n\nimport '../styles/room.scss';\n\ntype RoomParams = {\n  id: string;\n}\nexport function AdminRoom() {\n    const { user } = useAuth();\n    const params = useParams<RoomParams>();\n    const [newQuestion, setNewQuestion] = useState('');\n    const roomId = params.id;\n    const {questions, title} = useRoom(roomId);\n  \n    async function handleSendQuestion(event: FormEvent) {\n      event.preventDefault();\n  \n      if (newQuestion.trim() === '') {\n        return;\n      }\n  \n      if (!user) {\n        throw new Error('You must be logged in');\n      }\n  \n      const question = {\n        content: newQuestion,\n        author: {\n          name: user.name,\n          avatar: user.avatar,\n        },\n        isHighlighted: false,\n        isAnswered: false\n      };\n  \n      await database.ref(`rooms/${roomId}/questions`).push(question);\n  \n      setNewQuestion('');\n    }\n  \n    return (\n      <div id=\"page-room\">\n        <header>\n          <div className=\"content\">\n            <img src={logoImg} alt=\"Letmeask\" />\n            <div>\n            <RoomCode code={roomId} />\n            <Button isOutline>Encerrar sala</Button>\n            </div>\n          </div>\n        </header>\n  \n        <main>\n          <div className=\"room-title\">\n            <h1>Sala {title}</h1>\n            { questions.length > 0 && <span>{questions.length} pergunta(s)</span> }\n          </div>\n\n          <div className=\"question-list\">\n            {\n              questions.map(questions => {\n                return (\n                  <Question\n                    key={questions.id}\n                    content={questions.content}\n                    author={questions.author}\n\n                  >\n\n                  </Question>\n\n                )\n              })\n            }\n          </div>\n        </main>\n      </div>\n    );\n  }"]},"metadata":{},"sourceType":"module"}