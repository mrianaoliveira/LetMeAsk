{"ast":null,"code":"var _jsxFileName = \"/home/mariana/Documents/reactjs/Letmeask/src/contexts/AuthContext.tsx\",\n    _s = $RefreshSig$();\n\n// import firebase from \"firebase/compat\";\nimport firebase from \"firebase/compat/app\";\nimport { createContext, useEffect, useState } from \"react\";\nimport { auth } from \"../services/firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({});\nexport function AuthContextProvider(props) {\n  _s();\n\n  const [user, setUser] = useState();\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      if (user) {\n        const {\n          displayName,\n          photoURL,\n          uid\n        } = user;\n\n        if (!displayName || !photoURL) {\n          throw new Error('Missing informatio from Google Account');\n        }\n\n        setUser({\n          id: uid,\n          name: displayName,\n          avatar: photoURL\n        });\n      }\n    });\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  async function singInWithGoogle() {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    const result = await auth.signInWithPopup(provider);\n\n    if (result.user) {\n      const {\n        displayName,\n        photoURL,\n        uid\n      } = result.user;\n\n      if (!displayName || !photoURL) {\n        throw new Error('Missing informatio from Google Account');\n      }\n\n      setUser({\n        id: uid,\n        name: displayName,\n        avatar: photoURL\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      singInWithGoogle\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AuthContextProvider, \"hT6C72rcbfRUedrDq+TPaFfRI/M=\");\n\n_c = AuthContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["/home/mariana/Documents/reactjs/Letmeask/src/contexts/AuthContext.tsx"],"names":["firebase","createContext","useEffect","useState","auth","AuthContext","AuthContextProvider","props","user","setUser","unsubscribe","onAuthStateChanged","displayName","photoURL","uid","Error","id","name","avatar","singInWithGoogle","provider","GoogleAuthProvider","result","signInWithPopup","children"],"mappings":";;;AAAA;AACA,OAAOA,QAAP,MAAqB,qBAArB;AACA,SAASC,aAAT,EAAkCC,SAAlC,EAA6CC,QAA7C,QAA6D,OAA7D;AACA,SAASC,IAAT,QAAqB,sBAArB;;AAiBA,OAAO,MAAMC,WAAW,gBAAGJ,aAAa,CAAC,EAAD,CAAjC;AAGP,OAAO,SAASK,mBAAT,CAA6BC,KAA7B,EAAqD;AAAA;;AAC1D,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,EAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,WAAW,GAAGN,IAAI,CAACO,kBAAL,CAAwBH,IAAI,IAAI;AAClD,UAAGA,IAAH,EAAS;AACP,cAAM;AAAEI,UAAAA,WAAF;AAAeC,UAAAA,QAAf;AAAyBC,UAAAA;AAAzB,YAAgCN,IAAtC;;AAEA,YAAG,CAACI,WAAD,IAAgB,CAACC,QAApB,EAA8B;AAC5B,gBAAM,IAAIE,KAAJ,CAAU,wCAAV,CAAN;AACD;;AAEDN,QAAAA,OAAO,CAAC;AACNO,UAAAA,EAAE,EAAEF,GADE;AAENG,UAAAA,IAAI,EAAEL,WAFA;AAGNM,UAAAA,MAAM,EAAEL;AAHF,SAAD,CAAP;AAKD;AACF,KAdmB,CAApB;AAgBA,WAAM,MAAM;AACVH,MAAAA,WAAW;AACZ,KAFD;AAID,GArBQ,EAqBP,EArBO,CAAT;;AAuBA,iBAAeS,gBAAf,GAAkC;AAChC,UAAMC,QAAQ,GAAG,IAAIpB,QAAQ,CAACI,IAAT,CAAciB,kBAAlB,EAAjB;AAEA,UAAMC,MAAM,GAAG,MAAMlB,IAAI,CAACmB,eAAL,CAAqBH,QAArB,CAArB;;AAEI,QAAGE,MAAM,CAACd,IAAV,EAAgB;AACd,YAAM;AAAEI,QAAAA,WAAF;AAAeC,QAAAA,QAAf;AAAyBC,QAAAA;AAAzB,UAAgCQ,MAAM,CAACd,IAA7C;;AAEA,UAAG,CAACI,WAAD,IAAgB,CAACC,QAApB,EAA8B;AAC5B,cAAM,IAAIE,KAAJ,CAAU,wCAAV,CAAN;AACD;;AAEDN,MAAAA,OAAO,CAAC;AACNO,QAAAA,EAAE,EAAEF,GADE;AAENG,QAAAA,IAAI,EAAEL,WAFA;AAGNM,QAAAA,MAAM,EAAEL;AAHF,OAAD,CAAP;AAKD;AACN;;AAEC,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEL,MAAAA,IAAF;AAAQW,MAAAA;AAAR,KAA7B;AAAA,cACKZ,KAAK,CAACiB;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GAnDelB,mB;;KAAAA,mB","sourcesContent":["// import firebase from \"firebase/compat\";\nimport firebase from \"firebase/compat/app\";\nimport { createContext,ReactNode, useEffect, useState } from \"react\";\nimport { auth } from \"../services/firebase\";\n\ntype User = {\n    id: string;\n    name: string;\n    avatar: string;\n};\n  \ntype AuthContextType = {\n    user: User | undefined;\n    singInWithGoogle: () => Promise<void>;\n};\n  \ntype AuthContextProps = {\n    children: ReactNode;\n};\n\nexport const AuthContext = createContext({} as AuthContextType);\n\n\nexport function AuthContextProvider(props:AuthContextProps) {\n  const [user, setUser] = useState<User>();\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      if(user) {\n        const { displayName, photoURL, uid} = user\n\n        if(!displayName || !photoURL) {\n          throw new Error('Missing informatio from Google Account');\n        }\n        \n        setUser({\n          id: uid,\n          name: displayName,\n          avatar: photoURL\n        })\n      }\n    })\n\n    return() => {\n      unsubscribe();\n    }\n\n  },[] )\n\n  async function singInWithGoogle() {\n    const provider = new firebase.auth.GoogleAuthProvider();\n\n    const result = await auth.signInWithPopup(provider);\n\n        if(result.user) {\n          const { displayName, photoURL, uid} = result.user\n\n          if(!displayName || !photoURL) {\n            throw new Error('Missing informatio from Google Account');\n          }\n          \n          setUser({\n            id: uid,\n            name: displayName,\n            avatar: photoURL\n          })\n        }\n  }\n\n    return(\n        <AuthContext.Provider value={{ user, singInWithGoogle }}>\n            {props.children}\n        </AuthContext.Provider>\n    );\n}"]},"metadata":{},"sourceType":"module"}